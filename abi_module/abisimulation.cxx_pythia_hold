/*============================================================================= 
  Author: Abinash Pun
  Goal: Trying to make the vertex distribution from PYTHIA more realistic
  (may be add some realistic distribution function)
  Strategy: write an class similar to photons (but with cmake instead of autogen.sh, follow the example module from Haiwang)
  ============================================================================*/
#include "abisimulation.h"


//#include <geom_svc/GeomSvc.h>

#include <fun4all/Fun4AllReturnCodes.h>
#include <fun4all/PHTFileServer.h>
#include <phool/PHNodeIterator.h>
#include <phool/PHIODataNode.h>
#include <phool/getClass.h>
#include <g4main/PHG4TruthInfoContainer.h>
#include <g4main/PHG4HitContainer.h>
#include <g4main/PHG4Hit.h>
#include <g4main/PHG4Particle.h>
#include <g4main/PHG4HitDefs.h>
#include <g4main/PHG4VtxPoint.h>

#include <TFile.h>
#include <TTree.h>

#include <cstring>
#include <cmath>
#include <cfloat>
#include <stdexcept>
#include <limits>
#include <tuple>
#include <cassert>
#include <iostream>


#include <boost/lexical_cast.hpp>
#define LogError(exp)		std::cout<<"ERROR: "  <<__FILE__<<": "<<__LINE__<<": "<< exp << std::endl

using namespace std;


abisimulation::abisimulation(const std::string &name)
  : SubsysReco("ABISIMULATION")
{
  outfilename = name;
  //initialize global variables to -999 so that they have a spot in memory
  //initialize_to_zero(); 
  ResetVars();

  //add other initializers here 
}

int abisimulation::Init(PHCompositeNode *topnode)
{
  file = new TFile(outfilename.c_str(), "RECREATE");
  InitTree(); 
  return Fun4AllReturnCodes::EVENT_OK;

}


int abisimulation::InitRun(PHCompositeNode *topNode) {

 
 

  //p_geomSvc = GeomSvc::instance();

  int ret = GetNodes(topNode);
  if(ret != Fun4AllReturnCodes::EVENT_OK) return ret;

  return Fun4AllReturnCodes::EVENT_OK;
}


int abisimulation::process_event(PHCompositeNode *topnode)
{
  //cout<<" ==============I am here in abisimulation..."<<endl;
 
  if(_truth) {
    for(auto iter=_truth->GetPrimaryParticleRange().first;
    	iter!=_truth->GetPrimaryParticleRange().second;
    	++iter) {

    // for(auto iter=_truth->GetSecondaryParticleRange().first;
    // 	iter!=_truth->GetSecondaryParticleRange().second;
    //  	++iter) {
  
    PHG4Particle * par = iter->second;
      
    int vtx_id =  par->get_vtx_id();

    PHG4VtxPoint* vtx = _truth->GetVtx(vtx_id);
    // const PHG4Particle * last_primary =
    //   _truth->GetMap().rbegin()->second;
    //   const PHG4VtxPoint* vtx = _truth->GetPrimaryVtx(last_primary->get_vtx_id());
      // assert(primary_vtx);
 
    truthpid = par->get_pid();
    truth_vtxx = vtx->get_x();
    truth_vtxy = vtx->get_y();
    truth_vtxz = vtx->get_z();
    truthpx = par->get_px();
    truthpy = par->get_py();
    truthpz = par->get_pz();
    truth_tree->Fill();
    }
  }
  return 0;
}

int abisimulation::End(PHCompositeNode *topnode)
{
  std::cout << " DONE PROCESSING " << endl;

  file->Write();
  file->Close();
  return 0;
}

void abisimulation::ResetVars()
{
  truth_vtxx= 0.0;
  truth_vtxy=0.0;
  truth_vtxz=0.0;
  truthpid = 0;
  truthpx=0.;
  truthpy=0.;
  truthpz=0.;
}

void abisimulation::InitTree()
{
  truth_tree = new TTree("truthtree","a tree with all truth information from generator");
  truth_tree->Branch("truth_vtxx", &truth_vtxx, "truth_vtxx/F");
  truth_tree->Branch("truth_vtxy", &truth_vtxy, "truth_vtxy/F");
  truth_tree->Branch("truth_vtxz", &truth_vtxz, "truth_vtxz/F");
  truth_tree->Branch("truthpx", &truthpx, "truthpx/F");
  truth_tree->Branch("truthpy", &truthpy, "truthpy/F");
  truth_tree->Branch("truthpz", &truthpz, "truthpz/F");
  truth_tree->Branch("truthpid", &truthpid, "truthpid/I");
}

 int abisimulation::GetNodes(PHCompositeNode* topNode)
{

  _truth = findNode::getClass<PHG4TruthInfoContainer>(topNode, "G4TruthInfo");
  if (!_truth) {
    LogError("!_truth");
    return Fun4AllReturnCodes::ABORTEVENT;
  }
  return Fun4AllReturnCodes::EVENT_OK;
}
